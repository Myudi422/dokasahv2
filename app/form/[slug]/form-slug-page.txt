// app/form/[slug]/page.tsx
"use client";
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/components/AuthContext';

// Tambahkan parameter props
export default function FormPage({ params }) {
    const { slug } = params; // Ambil slug dari params
    const router = useRouter();
    const { token, user } = useAuth();
    const [formData, setFormData] = useState({});
    const [submissionStatus, setSubmissionStatus] = useState('draft');
    const [formConfig, setFormConfig] = useState(null);

    
  useEffect(() => {
    if (!slug || !token) return;

    const fetchForm = async () => {
      try {
        const res = await fetch(`/api/forms/${slug}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        if (!res.ok) throw new Error('Form tidak ditemukan');
        
        const data = await res.json();
        setFormConfig(data.form);
        setFormData(data.submission?.data || {});
        setSubmissionStatus(data.submission?.status || 'draft');
      } catch (error) {
        console.error(error);
        alert('Gagal memuat form');
      }
    };

    fetchForm();
  }, [slug, token]);

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target;
    const newValue = type === 'file' ? files[0] : value;
    
    setFormData(prev => ({
      ...prev,
      [name]: newValue
    }));

    // Auto-save draft
    if (type !== 'submit') {
      saveDraft();
    }
  };

  const saveDraft = async () => {
    try {
      await fetch(`/api/forms/${slug}/draft`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ data: formData })
      });
    } catch (error) {
      console.error('Gagal menyimpan draft:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      await fetch(`/api/forms/${slug}/submit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ data: formData })
      });
      
      setSubmissionStatus('submitted');
      alert('Form berhasil disubmit!');
    } catch (error) {
      console.error('Gagal submit form:', error);
      alert('Terjadi kesalahan saat submit');
    }
  };

  if (!user) return <div>Loading...</div>;

  return (
    <div className="max-w-3xl mx-auto p-4">
      <h1 className="text-xl font-bold mb-6">{formConfig?.type || 'Formulir'}</h1>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Nama PT */}
        <div className="space-y-2">
          <label className="block">Nama PT</label>
          <input 
            type="text" 
            name="nama_pt"
            value={formData?.nama_pt || ''}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
            required
          />
        </div>

        {/* Nama Singkatan PT */}
        <div className="space-y-2">
          <label className="block">Nama Singkatan PT</label>
          <input 
            type="text" 
            name="nama_singkatan"
            value={formData?.nama_singkatan || ''}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
            required
          />
        </div>

        {/* Jenis Usaha */}
        <div className="space-y-2">
          <label className="block">Jenis Usaha</label>
          <input 
            type="text" 
            name="jenis_usaha"
            value={formData?.jenis_usaha || ''}
            onChange={handleInputChange}
            className="w-full px-3 py-2 border rounded"
            required
          />
        </div>

        {/* Sisa field lainnya */}
        
        <div className="flex justify-end gap-4 mt-8">
          <button 
            type="button"
            onClick={() => router.back()}
            className="px-4 py-2 bg-gray-200 rounded"
          >
            Batal
          </button>
          <button 
            type="submit"
            className={`px-4 py-2 rounded ${
              submissionStatus === 'submitted' 
                ? 'bg-green-200 cursor-not-allowed' 
                : 'bg-green-600 text-white'
            }`}
            disabled={submissionStatus === 'submitted'}
          >
            {submissionStatus === 'submitted' ? 'Telah Disubmit' : 'Submit'}
          </button>
        </div>
      </form>
    </div>
  );
}


LOGIN :

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { signInWithPopup, auth, provider } from "../public/firebase.config";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/components/AuthContext";

export default function LoginPage() {
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const { setToken } = useAuth(); // Gunakan setToken dari context

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = localStorage.getItem("token");
        if (token) {
          const response = await fetch("http://localhost:3001/api/protected", {
            headers: { Authorization: `Bearer ${token}` },
          });
          
          if (response.ok) {
            router.push("/dashboard");
          } else {
            localStorage.removeItem("token");
          }
        }
      } catch (error) {
        console.error(error);
      }
    };
    
    checkAuth();
  }, [router]);

  const handleGoogleLogin = async () => {
    setIsLoading(true);
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;

      const response = await fetch("http://localhost:3001/api/auth", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: user.displayName,
          email: user.email,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setToken(data.token); // Gunakan setToken dari context
        router.push("/dashboard");
      } else {
        setError("Gagal menyimpan data pengguna.");
      }
    } catch (err) {
      setError("Login gagal. Silakan coba lagi.");
    } finally {
      setIsLoading(false);
    }
  };
  

  return (
    <div className="flex min-h-screen flex-col">
      {/* Header */}
      <header className="sticky top-0 z-50 w-full border-b bg-background/80 backdrop-blur-lg">
        <div className="container flex h-16 items-center justify-between">
          <div className="flex items-center gap-2 font-bold text-xl">
            <div className="size-8 rounded-full bg-gradient-to-br from-primary to-primary-foreground flex items-center justify-center text-white">
              L
            </div>
            Legalitas
          </div>
          <nav className="hidden md:flex gap-6">
            <Link href="/" className="text-sm font-medium hover:text-primary">
              Beranda
            </Link>
            <Link href="/layanan" className="text-sm font-medium hover:text-primary">
              Layanan
            </Link>
            <Link href="/tentang-kami" className="text-sm font-medium hover:text-primary">
              Tentang Kami
            </Link>
            <Link href="/#kontak" className="text-sm font-medium hover:text-primary">
              Kontak
            </Link>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-900 dark:to-gray-800">
        <div className="w-full max-w-md space-y-8 px-4 py-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <div className="text-center">
            <h2 className="mt-6 text-3xl font-bold tracking-tight text-gray-900 dark:text-white">
              Masuk ke Dashboard Anda
            </h2>
          </div>
          {error && <p className="text-red-500 text-center">{error}</p>}
          <div className="mt-8 space-y-6">
            <Button
              onClick={handleGoogleLogin}
              disabled={isLoading}
              className="w-full flex items-center justify-center"
            >
              {isLoading ? (
                "Memproses..."
              ) : (
                <>
                  <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                    <path
                      fill="currentColor"
                      d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    />
                    <path
                      fill="currentColor"
                      d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    />
                    <path
                      fill="currentColor"
                      d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    />
                    <path
                      fill="currentColor"
                      d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    />
                    <path fill="none" d="M1 1h22v22H1z" />
                  </svg>
                  Masuk dengan Google
                </>
              )}
            </Button>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="border-t bg-muted/40 backdrop-blur-sm">
        <div className="container flex flex-col gap-6 py-8 md:py-12">
          <div className="flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
            <p className="text-xs text-muted-foreground">
              &copy; {new Date().getFullYear()} Legalitas. Hak Cipta Dilindungi.
            </p>
            <div className="flex gap-4">
              <Link href="#" className="text-xs text-muted-foreground hover:text-foreground">
                Syarat & Ketentuan
              </Link>
              <Link href="#" className="text-xs text-muted-foreground hover:text-foreground">
                Kebijakan Privasi
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

BACKEND :

require("dotenv").config();
const express = require("express");
const mysql = require("mysql2/promise");
const cors = require("cors");
const jwt = require("jsonwebtoken"); // Tambahkan library jsonwebtoken

const app = express();
const PORT = 3001;

// Middleware
app.use(cors({
  origin: "http://localhost:3000", // Izinkan hanya frontend
  methods: ["GET", "POST", "PUT", "DELETE"], // Metode HTTP yang diizinkan
  allowedHeaders: ["Content-Type", "Authorization"], // Header yang diizinkan
}));
app.use(express.json());

// Koneksi ke database
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

// Secret key untuk JWT (simpan di .env)
const JWT_SECRET = process.env.JWT_SECRET || "default_secret";

// Tambahkan di backend
function generateUniqueSlug() {
    return Math.random().toString(36).substring(2, 15) + 
           Math.random().toString(36).substring(2, 15);
  }

// Fungsi untuk menghasilkan token JWT
function generateToken(user) {
  return jwt.sign(
    { id: user.id, email: user.email, role: user.role, name: user.name }, // Payload
    JWT_SECRET, // Secret key
    { expiresIn: "1h" } // Token valid selama 1 jam
  );
}

// API untuk menyimpan data pengguna dan menghasilkan token
app.post("/api/auth", async (req, res) => {
  const { name, email } = req.body;

  try {
    // Cek apakah pengguna sudah ada
    const [rows] = await pool.execute("SELECT * FROM users_legal WHERE email = ?", [email]);

    let user;
    if (rows.length > 0) {
      // Jika pengguna sudah ada, update data
      await pool.execute(
        "UPDATE users_legal SET name = ?, updated_at = NOW() WHERE email = ?",
        [name, email]
      );
      user = rows[0];
    } else {
      // Jika pengguna belum ada, tambahkan data baru
      const [result] = await pool.execute(
        "INSERT INTO users_legal (name, email, role, created_at, updated_at) VALUES (?, ?, 'user', NOW(), NOW())",
        [name, email]
      );
      user = { id: result.insertId, name, email, role: "user" };
    }

    // Generate JWT token
    const token = generateToken(user);

    // Kirim token ke frontend
    res.status(200).json({ message: "Login berhasil.", token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Gagal menyimpan data pengguna." });
  }
});

// Middleware untuk memverifikasi token
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(401).json({ message: "Akses ditolak. Token tidak ditemukan." });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: "Token tidak valid atau telah kedaluwarsa." });
    }
    req.user = user; // Simpan data pengguna dari token
    next();
  });
}

// Contoh API yang dilindungi oleh token
app.get("/api/protected", authenticateToken, (req, res) => {
  res.status(200).json({ message: "Ini adalah data terlindungi.", user: req.user });
});

// Create new form configuration (Admin only)
app.post('/api/forms', authenticateToken, async (req, res) => {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Forbidden' });
    }
  
    const { email, formType } = req.body;
    const slug = generateUniqueSlug(); // Implement a slug generation function
  
    try {
      const [result] = await pool.execute(
        'INSERT INTO form_configurations (form_type, assigned_email, slug) VALUES (?, ?, ?)',
        [formType, email, slug]
      );
  
      res.status(201).json({
        message: 'Form created successfully',
        link: `http://localhost:3000/form/${slug}`
      });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Failed to create form' });
    }
  });
  
  // Get form data and check access
  app.get('/api/forms/:slug', authenticateToken, async (req, res) => {
    try {
      const [forms] = await pool.execute(
        'SELECT * FROM form_configurations WHERE slug = ?',
        [req.params.slug]
      );
  
      if (forms.length === 0) {
        return res.status(404).json({ message: 'Form not found' });
      }
  
      const form = forms[0];
      
      // Check if user email matches assigned email
      if (form.assigned_email !== req.user.email) {
        return res.status(403).json({ message: 'Forbidden' });
      }
  
      // Get existing submission if exists
      const [submissions] = await pool.execute(
        'SELECT * FROM form_submissions WHERE form_config_id = ? AND user_id = ?',
        [form.id, req.user.id]
      );
  
      res.status(200).json({
        form: {
          type: form.form_type,
          slug: form.slug
        },
        submission: submissions[0] || null
      });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Server error' });
    }
  });
  
  // Save draft
  app.put('/api/forms/:slug/draft', authenticateToken, async (req, res) => {
    try {
      const { slug } = req.params;
      const { data } = req.body;
  
      const [forms] = await pool.execute(
        'SELECT * FROM form_configurations WHERE slug = ?',
        [slug]
      );
  
      if (forms.length === 0) {
        return res.status(404).json({ message: 'Form not found' });
      }
  
      const form = forms[0];
  
      // Check email match
      if (form.assigned_email !== req.user.email) {
        return res.status(403).json({ message: 'Forbidden' });
      }
  
      // Check if submission exists
      const [submissions] = await pool.execute(
        'SELECT * FROM form_submissions WHERE form_config_id = ? AND user_id = ?',
        [form.id, req.user.id]
      );
  
      if (submissions.length > 0) {
        // Update existing draft
        await pool.execute(
          'UPDATE form_submissions SET data = ?, updated_at = NOW() WHERE id = ?',
          [JSON.stringify(data), submissions[0].id]
        );
      } else {
        // Create new draft
        await pool.execute(
          'INSERT INTO form_submissions (form_config_id, user_id, data) VALUES (?, ?, ?)',
          [form.id, req.user.id, JSON.stringify(data)]
        );
      }
  
      res.status(200).json({ message: 'Draft saved successfully' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Failed to save draft' });
    }
  });
  
  // Submit form
  app.post('/api/forms/:slug/submit', authenticateToken, async (req, res) => {
    try {
      const { slug } = req.params;
      const { data } = req.body;
  
      const [forms] = await pool.execute(
        'SELECT * FROM form_configurations WHERE slug = ?',
        [slug]
      );
  
      if (forms.length === 0) {
        return res.status(404).json({ message: 'Form not found' });
      }
  
      const form = forms[0];
  
      // Check email match
      if (form.assigned_email !== req.user.email) {
        return res.status(403).json({ message: 'Forbidden' });
      }
  
      // Check if submission exists
      const [submissions] = await pool.execute(
        'SELECT * FROM form_submissions WHERE form_config_id = ? AND user_id = ?',
        [form.id, req.user.id]
      );
  
      if (submissions.length > 0) {
        // Update existing submission
        await pool.execute(
          'UPDATE form_submissions SET data = ?, status = "submitted", updated_at = NOW() WHERE id = ?',
          [JSON.stringify(data), submissions[0].id]
        );
      } else {
        // Create new submission
        await pool.execute(
          'INSERT INTO form_submissions (form_config_id, user_id, data, status) VALUES (?, ?, ?, "submitted")',
          [form.id, req.user.id, JSON.stringify(data)]
        );
      }
  
      res.status(200).json({ message: 'Form submitted successfully' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Failed to submit form' });
    }
  });

// Jalankan server
app.listen(PORT, () => {
  console.log(`Backend berjalan di http://localhost:${PORT}`);
});

AUTHCONTEXT :
// components/AuthContext.tsx
"use client";
import { createContext, useContext, useEffect, useState } from 'react';

interface AuthContextType {
  token: string | null;
  user: any;
  setToken: (token: string | null) => void; // Tambahkan ini
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [token, _setToken] = useState<string | null>(null); // Ubah inisialisasi ke null
  const [user, setUser] = useState<any>(null);

  // Fungsi untuk mengupdate token
  const setToken = (newToken: string | null) => {
    if (newToken) {
      localStorage.setItem('token', newToken);
    } else {
      localStorage.removeItem('token');
    }
    _setToken(newToken);
  };

  useEffect(() => {
    // Ambil token dari localStorage setelah component mount
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      _setToken(storedToken);
    }
  }, []);

  useEffect(() => {
    if (token) {
      fetch('http://localhost:3001/api/protected', {
        headers: { Authorization: `Bearer ${token}` }
      })
      .then(res => res.json())
      .then(data => setUser(data.user))
      .catch(() => {
        setToken(null);
      });
    }
  }, [token]);

  return (
    <AuthContext.Provider value={{ token, user, setToken }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}